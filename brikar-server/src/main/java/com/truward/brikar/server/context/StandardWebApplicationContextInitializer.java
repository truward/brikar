package com.truward.brikar.server.context;

import org.springframework.context.ApplicationContextInitializer;
import org.springframework.core.env.PropertySource;
import org.springframework.web.context.ConfigurableWebApplicationContext;

import javax.annotation.Nonnull;
import java.math.BigInteger;
import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.ThreadLocalRandom;

/**
 * Application context initializer that contains standard logic for initializing application properties.
 *
 * TODO: Use ApplicationContextInitializer generated by JDK proxy (to simplify injection of PropertySources)
 */
public final class StandardWebApplicationContextInitializer
    implements ApplicationContextInitializer<ConfigurableWebApplicationContext> {

  private static final ConcurrentHashMap<String, PropertySource<?>> PROPERTIES = new ConcurrentHashMap<>();

  public static final String PROPERTY_SOURCE_SERVLET_CONFIG_KEY = "brikarPropertySource";

  // TODO: remove (see toplevel TODO)
  private static String lastKey = null;

  public interface ServletInitParameterSetter {
    void setInitParameter(@Nonnull String key, @Nonnull String value);
  }

  @Nonnull
  public static String registerPropertySource(@Nonnull ServletInitParameterSetter initParameterSetter,
                                              @Nonnull PropertySource<?> source) {
    final BigInteger bigInteger = new BigInteger(128, ThreadLocalRandom.current());
    final String key = bigInteger.toString(16);
    if (PROPERTIES.containsKey(key)) {
      return registerPropertySource(initParameterSetter, source); // shouldn't happen
    }

    initParameterSetter.setInitParameter(PROPERTY_SOURCE_SERVLET_CONFIG_KEY, key);

    PROPERTIES.put(key, source);
    lastKey = key;

    return key;
  }

  public static void removePropertySourceByKey(@Nonnull String key) {
    PROPERTIES.remove(key);
  }

  @Override
  public void initialize(ConfigurableWebApplicationContext applicationContext) {
    // This doesn't work - TODO: investigate
    //final String key = applicationContext.getServletConfig().getInitParameter(PROPERTY_SOURCE_SERVLET_CONFIG_KEY);
    final String key = lastKey;

    if (key == null) {
      throw new IllegalStateException("There is no property source key associated with " +
          PROPERTY_SOURCE_SERVLET_CONFIG_KEY + " in current ServletConfig");
    }

    final PropertySource<?> propertySource = PROPERTIES.get(key);
    if (propertySource == null) {
      throw new IllegalStateException("There is no resource associated with a key=" + key);
    }

    applicationContext.getEnvironment().getPropertySources().addFirst(propertySource);
  }
}
